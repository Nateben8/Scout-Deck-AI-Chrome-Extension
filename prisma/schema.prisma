// Prisma schema for ScoutDeck backend (Milestone 1)
// DB: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FilmSide {
  Offense
  Defense
}

model User {
  id           String          @id @default(cuid())
  email        String          @unique
  name         String?
  picture      String?
  passwordHash String?         // bcrypt hash for email/password sign-in (optional if using Google only)

  // Relations
  refreshTokens RefreshToken[]
  plays         Play[]
  accounts      OAuthAccount[]

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model OAuthAccount {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider            String   // e.g., "google"
  providerAccountId   String   // provider user id / sub
  createdAt           DateTime @default(now())

  @@unique([provider, providerAccountId])
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash  String   @unique  // store a salted hash of the refresh token
  expiresAt  DateTime
  revokedAt  DateTime?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model Play {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameId      String
  playNumber  Int
  filmSide    FilmSide
  fields      Json     // full payload collected by the extension

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, gameId, playNumber])
  @@index([userId, gameId])
} 